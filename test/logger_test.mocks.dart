// Mocks generated by Mockito 5.4.6 from annotations
// in loki_logger/test/logger_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:loki_logger/src/log_event.dart' as _i5;
import 'package:loki_logger/src/log_filter.dart' as _i4;
import 'package:loki_logger/src/log_output.dart' as _i3;
import 'package:loki_logger/src/loki_client.dart' as _i6;
import 'package:loki_logger/src/loki_config.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLokiConfig_0 extends _i1.SmartFake implements _i2.LokiConfig {
  _FakeLokiConfig_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [LogOutput].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogOutput extends _i1.Mock implements _i3.LogOutput {
  MockLogOutput() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void output(List<String>? lines) => super.noSuchMethod(
        Invocation.method(#output, [lines]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LogFilter].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogFilter extends _i1.Mock implements _i4.LogFilter {
  MockLogFilter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool shouldLog(_i5.LogEvent? event) => (super.noSuchMethod(
        Invocation.method(#shouldLog, [event]),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [LokiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockLokiClient extends _i1.Mock implements _i6.LokiClient {
  MockLokiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LokiConfig get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeLokiConfig_0(this, Invocation.getter(#config)),
      ) as _i2.LokiConfig);

  @override
  void log({
    required String? level,
    required String? message,
    Object? error,
    StackTrace? stackTrace,
    DateTime? time,
    String? loggerName,
    Map<String, String>? customLabels,
  }) =>
      super.noSuchMethod(
        Invocation.method(#log, [], {
          #level: level,
          #message: message,
          #error: error,
          #stackTrace: stackTrace,
          #time: time,
          #loggerName: loggerName,
          #customLabels: customLabels,
        }),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );
}
